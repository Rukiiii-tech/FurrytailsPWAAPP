// main.dart
import 'package:customer1/profile_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart'; // ADDED: For kIsWeb check
import 'package:flutter_web_plugins/url_strategy.dart'; // ADDED: For clean web URLs
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:customer1/firebase_options.dart'; // Use the correct import path

// Your screen imports
import 'package:customer1/welcome_screen.dart';
import 'package:customer1/login_screen.dart';
import 'package:customer1/signup_screen.dart';
import 'package:customer1/home_screen.dart';
import 'package:customer1/services_screen.dart';
import 'package:customer1/bookings.dart';
import 'package:customer1/forgot_password_screen.dart';
import 'package:customer1/my_pets_screen.dart';
import 'package:customer1/my_booking_screen.dart'; // ADDED: Correct MyBookingsScreen import
import 'package:customer1/booking_details_screen.dart';
import 'package:customer1/notification_screen.dart';
import 'package:customer1/notification_service.dart'; // The new notification service

// 1. DEFINE GLOBAL KEY FOR NAVIGATION
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

// Top-level function for background message handling
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // Ensure Firebase is initialized for background messages
  await Firebase.initializeApp();
  print('Handling a background message: ${message.messageId}');
}

Future<void> main() async {
  // 1. WIDGETS BINDING IS REQUIRED FOR ASYNC CALLS
  WidgetsFlutterBinding.ensureInitialized();

  // 2. INITIALIZE FIREBASE (CRITICAL)
  // Ensure firebase_options.dart has been correctly generated by
  // running 'flutterfire configure' in your terminal.
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // 3. INITIALIZE LOCAL NOTIFICATIONS & FCM SETUP
  await initializeNotifications();
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // Get any initial message that caused the application to open from a terminated state
  final RemoteMessage? initialMessage = await FirebaseMessaging.instance
      .getInitialMessage();

  String? initialBookingId;
  if (initialMessage != null && initialMessage.data.containsKey('bookingId')) {
    // Store the bookingId from the message
    initialBookingId = initialMessage.data['bookingId'];
  }

  // 4. RUN THE APP, PASSING THE INITIAL BOOKING ID
  runApp(MyApp(initialBookingId: initialBookingId));
}

// 5. CHANGE MyApp TO A STATELESS WIDGET (already done, but confirming the structure)
class MyApp extends StatelessWidget {
  // Add a field to hold the initial booking ID
  final String? initialBookingId;

  const MyApp({super.key, this.initialBookingId});

  // Method to handle post-startup navigation
  void _handleInitialNavigation(BuildContext context) {
    // Only navigate if an initial booking ID was passed
    if (initialBookingId != null) {
      // Use pushReplacement to replace the initial /login screen
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (context) =>
              BookingDetailsScreen(bookingId: initialBookingId!),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    // CRUCIAL: Add a post-frame callback to safely run navigation logic
    // This executes AFTER the app has fully built its first frame (no white screen)
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _handleInitialNavigation(context);
    });

    return MaterialApp(
      navigatorKey: navigatorKey, // Use the global key for navigation
      title: 'Furry Tails',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      debugShowCheckedModeBanner: false,
      // The default initial route is still /login
      initialRoute: '/login',
      routes: {
        '/login': (context) => const LoginScreen(),
        '/signup': (context) => const SignUpScreen(),
        '/home_screen': (context) => const HomeScreen(),
        '/services_screen': (context) => const ServicesScreen(),
        '/bookings': (context) => const PetsScreen(), // Corrected route name
        '/forgot_password': (context) => const ForgotPasswordScreen(),
        '/my_pets': (context) => const MyPetsScreen(),
        '/my_bookings': (context) => const MyBookingsScreen(),
        '/profile': (context) => const ProfileScreen(),
        '/notifications': (context) => const NotificationScreen(),
      },
    );
  }
}
